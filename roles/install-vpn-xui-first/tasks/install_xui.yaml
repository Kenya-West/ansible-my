---
- name: Install X-UI as first-party with Docker
  hosts: all
  become: true
  become_user: "{{ standard_user }}"
  vars_files:
    - '{{ inventory_dir }}/vars/vars.yaml'
  vars:
    vpn_dir: vpn-xui-first
    project_dir: xui
    source_asset_fullpath: "{{ inventory_dir }}/assets/{{ vpn_dir }}/{{ project_dir }}"
    dest_project_fullpath: "/home/{{ standard_user }}/{{ vpn_dir }}/{{ project_dir }}"

  tasks:
  # Validate fiels and folders exist
  - name: Ensure ~/project directory exists
    file:
      path: "{{ dest_project_fullpath }}/"
      state: directory
      mode: '0775'
  - name: Ensure ~/project/db directory exists
    file:
      path: "{{ dest_project_fullpath }}/db"
      state: directory
      mode: '0775'
  # Stop and down if it was up
  - name: Check status of Docker Compose services
    command: docker compose ps
    args:
      chdir: "{{ dest_project_fullpath }}/"
    register: docker_compose_status
    ignore_errors: yes
  - name: Stop X-UI service if it is running
    command: docker compose down xui
    args:
      chdir: "{{ dest_project_fullpath }}/"
    when: "'xui' in docker_compose_status.stdout"
    ignore_errors: yes
  - name: Pull new X-UI release service if it was running
    command: docker compose pull xui
    args:
      chdir: "{{ dest_project_fullpath }}/"
    when: "'xui' in docker_compose_status.stdout"
    ignore_errors: yes
  # Check files existing
  - name: Check if ~/project/db/ exists
    stat: path="{{ dest_project_fullpath }}/db/x-ui.db"
    register: db_file
  # Copy files
  - name: Copy all files from local root assets/xui to remote ~/project
    copy:
      src: "{{ source_asset_fullpath }}/{{ item.sourcename }}"
      dest: "{{ dest_project_fullpath }}/{{ item.destname }}"
    loop:
      - sourcename: "docker-compose.yml"
        destname: "docker-compose.yml"
      - sourcename: ".env-{{ inventory_hostname }}"
        destname: ".env"
    register: copy_files_root
  - name: Copy all database files from local root assets/xui/db/ to remote ~/project/db/
    copy:
      src: "{{ item }}"
      dest: "{{ dest_project_fullpath }}/db/{{ item | basename }}"
    with_fileglob:
      - "{{ source_asset_fullpath }}/db/x-ui.db"
    register: copy_files_db
  # Network existing check
  - name: Ensure Docker network 'caddy-fallback' exists with specific settings
    docker_network:
      name: caddy-fallback
      driver: bridge
      state: present
  # Up the service
  - name: Run docker compose up for X-UI
    command: docker compose up xui -d
    args:
      chdir: "{{ dest_project_fullpath }}/"
    register: docker_compose_up
  - name: Wait for 3 seconds after starting docker compose
    pause:
      seconds: 3
    when: docker_compose_up.changed
  - name: Check if X-UI service is running correctly
    command: docker compose ps xui
    args:
      chdir: "{{ dest_project_fullpath }}/"
    register: docker_ps
    failed_when: "'Up' not in docker_ps.stdout"
    when: docker_compose_up.changed
