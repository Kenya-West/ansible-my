---
- name: Install web features - currently includes certbot only
  hosts: vpn_xui_first
  become: false
  become_user: "{{ standard_user }}"
  vars:
    project_dir: certbot
    project_name: certbot
    project_root_dir: "{{ webfeatures_project_structure_root }}"
    source_asset_rootpath_common: "{{ playbook_dir }}/assets/hosts-list/common/{{ project_root_dir }}"
    source_asset_fullpath_common: "{{ source_asset_rootpath_common }}/{{ project_dir }}"
    source_asset_rootpath_project: "{{ playbook_dir }}/assets/hosts-list/{{ inventory_hostname }}/{{ project_root_dir }}"
    source_asset_fullpath_project: "{{ source_asset_rootpath_project }}/{{ project_dir }}"
    dest_project_rootpath: "/home/{{ standard_user }}/{{ project_root_dir }}"
    dest_project_fullpath: "{{ dest_project_rootpath }}/{{ project_dir }}"

    # certbot_create_extra_args: "--expand --redirect --pre-hook '{{ dest_project_fullpath }}/hooks/pre-hook.sh' --post-hook '{{ dest_project_fullpath }}/hooks/post-hook.sh'"
    certbot_create_extra_args: "--expand --redirect --deploy-hook '{{ dest_project_fullpath }}/hooks/deploy-hook.sh'"

    cronjob_script_path_without_analytics: "{{ dest_project_fullpath }}/scripts/update.sh"
    cronjob_script_path_with_analytics: "{{ cronjob_script_path_without_analytics }}"

  roles:
    - name: ./roles/kwtoolset/copy_files_templating
      vars:
        copy_files_templating_dir_list:
          - src: "{{ source_asset_fullpath_common }}"
            dest: "{{ dest_project_rootpath }}"
            default_mode: "0775"
          - src: "{{ source_asset_fullpath_project }}"
            dest: "{{ dest_project_rootpath }}"
            default_mode: "0775"
    - name: geerlingguy.certbot
      tags: certbot
      become: true
      become_user: root

  pre_tasks:
    - name: Change cron job path to monitoring if it is in analytics_node group
      set_fact:
        cronjob_script_path_with_analytics: "{{ cron_wrapped_task_prefix }} --job-name certbot_renew -- {{ cronjob_script_path_without_analytics }} {{ cron_wrapped_task_suffix }}"
      when: "'analytics_node' in group_names"

    # Certbot apt packages are outdated and no longer officially supported by certbot.
    # The oficially supported installation method is via snap.
    - name: Remove certbot apt package if installed
      become: true
      become_user: root
      ansible.builtin.apt:
        name: "{{ item }}"
        state: absent
      with_items:
        - python-certbot-nginx
        - certbot
    - name: Install NGINX apt package if not installed
      become: true
      become_user: root
      ansible.builtin.apt:
        name: nginx
        state: present
    - name: Determine if killport utility is installed
      ansible.builtin.command: which killport
      register: killport_installed
      ignore_errors: true
    - name: Kill port 80 using killport utility (if installed)
      become: true
      become_user: root
      ansible.builtin.shell: killport 80
      when: killport_installed.rc == 0
      ignore_errors: true

    # Check UFW and enable 80 port
    - name: Check if UFW is installed
      ansible.builtin.shell: "command -v ufw"
      register: ufw_installed
      changed_when: false
      failed_when: false
    - name: Enable port 80 in UFW
      become: true
      become_user: root
      community.general.ufw:
        rule: allow
        port: 80
        proto: tcp
        state: enabled
      when: ufw_installed.stdout != ""

  post_tasks:
    - name: Verify if update.sh exists
      ansible.builtin.stat:
        path: "{{ cronjob_script_path_without_analytics }}"
      register: update_script_exists

    - name: Fail if update.sh does not exist
      ansible.builtin.fail:
        msg: "The update.sh script does not exist at {{ cronjob_script_path_without_analytics }}"
      when: update_script_exists.stat.exists == false

    - name: Add cron job for certbot renew
      become: true
      become_user: root
      ansible.builtin.cron:
        name: "Certbot renew"
        minute: "{{ certbot_auto_renew_minute }}"
        hour: "{{ certbot_auto_renew_hour }}"
        weekday: "{{ certbot_auto_renew_weekday }}"
        job: "{{ cronjob_script_path_with_analytics }}"
      when: update_script_exists.stat.exists == true

    # GROUP, SSL DIRECTORY AND PERMISSIONS

    - name: Create {{ cert_access_group }} group
      become: true
      become_user: root
      ansible.builtin.group:
        name: "{{ cert_access_group }}"
        state: present

    - name: Add users to {{ cert_access_group }} group
      become: true
      become_user: root
      ansible.builtin.user:
        name: "{{ item }}"
        groups: "{{ cert_access_group }}"
        append: true
      with_items: "{{ cert_access_group_users }}"

    - name: Create {{ cert_location_root_path }} directory
      become: true
      become_user: root
      ansible.builtin.file:
        path: "{{ cert_location_root_path }}"
        state: directory
        owner: "{{ cert_location_root_owner }}"
        group: "{{ cert_access_group }}"
        mode: "{{ cert_location_root_permissions }}"

    # FIRST-RUN SCRIPT 

    - name: Verify if first-run.sh exists
      ansible.builtin.stat:
        path: "{{ dest_project_fullpath }}/scripts/first-run.sh"
      register: update_script_exists

    - name: Fail if first-run.sh does not exist
      ansible.builtin.fail:
        msg: "The first-run.sh script does not exist at {{ dest_project_fullpath }}/scripts/first-run.sh"
      when: update_script_exists.stat.exists == false

    # - name: Launch first-run.sh
    #   become: true
    #   become_user: root
    #   ansible.builtin.command: "{{ dest_project_fullpath }}/scripts/first-run.sh"
    #   when: update_script_exists.stat.exists == true
    #   register: first_launch_result

    # - name: Debug first-launch result
    #   ansible.builtin.debug:
    #     var: first_launch_result.stdout
    #   when: first_launch_result.stdout is defined

    # - name: Debug first-launch error result
    #   ansible.builtin.debug:
    #     var: first_launch_result.stderr
    #   when: first_launch_result.stderr is defined
